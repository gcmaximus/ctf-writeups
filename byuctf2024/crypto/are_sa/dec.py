from sympy import mod_inverse

def decrypt_rsa(N, e, C):
    # Compute N - 1
    phi = N - 1

    # Compute the modular inverse of e modulo (N-1)
    d = mod_inverse(e, phi)

    # Decrypt the ciphertext
    M = pow(C, d, N)
    
    return M

def int_to_ascii(n):
    # Assuming n is a number where each byte represents an ASCII character
    ascii_string = ""
    while n > 0:
        # Extract the last 8 bits (1 byte)
        ascii_string = chr(n % 256) + ascii_string
        n = n // 256
    return ascii_string

# Example usage
N = 128393532851463575343089974408848099857979358442919384244000744053339479654557691794114605827105884545240515605112453686433508264824840575897640756564360373615937755743038201363814617682765101064651503434978938431452409293245855062934837618374997956788830791719002612108253528457601645424542240025303582528541
e = 65537
C = 93825584976187667358623690800406736193433562907249950376378278056949067505651948206582798483662803340120930066298960547657544217987827103350739742039606274017391266985269135268995550801742990600381727708443998391878164259416326775952210229572031793998878110937636005712923166229535455282012242471666332812788

# Decrypt the ciphertext
plaintext = decrypt_rsa(N, e, C)


plaintext_ascii = int_to_ascii(plaintext)
print(f'The plaintext as ASCII is: {plaintext_ascii}')